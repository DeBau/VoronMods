[gcode_macro _homing_variables]
variable_verbose:             True    # Ausgabe aktivieren
variable_debug:               False   # Debug output
variable_travel_speed:          50    # Verfahrgeschwindigkeit
variable_move_accel:          1000    # Beschleunigung
variable_z_drop_speed:          20    # Verfahrgeschwindigkeit in Z
variable_safe_z:         	    25    # Sichere Z-Höhe
variable_enable_z_hop:        True    # z_Hop aktivieren

## Position des Z-Endstops angeben
variable_z_endstop_x:         -10
variable_z_endstop_y:         -10

## Motorstrom in [A] beim homen der Achsen X und Y
variable_motor_current_homing_x:    0.4
variable_motor_current_homing_y:    0.3
gcode:

## keine Änderungen ab hier vornehmen
##-------------------------------------------------------------------------------

[respond]

[force_move]
enable_force_move: True

[gcode_macro _HomingDebug]
gcode:
    {% set message  = params.MSG %}
    {% set debug = printer["gcode_macro _homing_variables"].debug|default(False) %}

    {% if debug %}
        { action_respond_info(message) }
    {% endif %}

[gcode_macro _exit_point]
gcode:
    {% set function  = 'pre_' ~ params.FUNCTION %}
    {% set move  = params.MOVE|default(0) %}
    {% set speed = printer["gcode_macro _homing_variables"].travel_speed %}
    # mandatory to save the new safe position
    M400
    SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}
    SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
    RESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}

[gcode_macro _entry_point]
gcode:
    {% set function  = 'pre_' ~ params.FUNCTION %}
    {% set move_accel = printer["gcode_macro _homing_variables"].move_accel|default(1000) %}
    # mandatory to save the new safe position
    M400
    SAVE_GCODE_STATE NAME={function}
    # removes the Z offset for better bed based docking
    SET_GCODE_OFFSET Z=0
    # all the macros initially assume absolute positioning
    G90
    # set a safe(sane) Acceleration
    SET_VELOCITY_LIMIT ACCEL={move_accel}

[homing_override]
axes: xyz
gcode:

     _homing_variables
    {% set safe_z = printer["gcode_macro _homing_variables"].safe_z|float %}
    # Safe Z for travel
    {% set safe_z = printer["gcode_macro _homing_variables"].safe_z %}
    {% set verbose = printer["gcode_macro _homing_variables"].verbose %}
    {% set enable_z_hop = printer["gcode_macro _homing_variables"].enable_z_hop %}
    {% set kinematic_z = 0 %}
    {% set motor_current_homing_x = printer["gcode_macro _homing_variables"].motor_current_homing_x %}
    {% set motor_current_homing_y = printer["gcode_macro _homing_variables"].motor_current_homing_y %}
    {% set z_drop_feedrate = printer["gcode_macro _homing_variables"].z_drop_speed * 60 %}
    {% set travel_feedrate = printer["gcode_macro _homing_variables"].travel_speed * 60 %}

   #_homing_overide_check_variables_version


    {% set home_x, home_y, home_z = False, False, False %}

    # which axes have been requested for homing
    {% if not 'X' in params
        and not 'Y' in params
        and not 'Z' in params %}
        {% set home_x, home_y, home_z = True, True, True %}
    {% else %}
        {% if 'X' in params %}
            {% set home_x = True %}
        {% endif %}

        {% if 'Y' in params %}
            {% set home_y = True %}
        {% endif %}

        {% if 'Z' in params %}
            {% set home_z = True %}
        {% endif %}
    {% endif %}  

    _entry_point function=homing_override


    {% if home_z %}
        {% if 'z' in printer.toolhead.homed_axes %}
            {% if printer.toolhead.position.z < safe_z %}
                {% if verbose %}
                    { action_respond_info("Z too low, performing ZHOP") }
                {% endif %}
                G0 Z{safe_z} F{z_drop_feedrate}
            {% endif %}
        {% else %}
            {% if verbose %}
                { action_respond_info("Z not homed, forcing full G28") }
            {% endif %}
            SET_KINEMATIC_POSITION X=0 Y=0 Z=0
            G0 Z{safe_z} F{z_drop_feedrate}
            {% set home_x, home_y, home_z = True, True, True %}
        {% endif %}
    {% endif %}


   # Home x
   {% if home_x %}
        {% if verbose %}
            { action_respond_info("Homing X") }
        {% endif %}
        {% if printer["gcode_macro _HOME_X"] is defined %}
             _HomingDebug msg="homing_override calling _HOME_X external script to handle the X homing"
             _HOME_X
        {% else %}
            _HomingDebug msg="homing_override Homing X, G28 X0"
            SET_TMC_CURRENT STEPPER=stepper_x CURRENT={motor_current_homing_x} 
            SET_TMC_CURRENT STEPPER=stepper_y CURRENT={motor_current_homing_x} 
            G28 X0
        {% endif %}
   {% endif %}

    # Home y
    {% if home_y %}
        {% if verbose %}
            { action_respond_info("Homing Y") }
        {% endif %}
        {% if printer["gcode_macro _HOME_Y"] is defined %}
             _HomingDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"
             _HOME_Y
        {% else %}
            _HomingDebug msg="homing_override Homing Y, G28 Y0"
            SET_TMC_CURRENT STEPPER=stepper_x CURRENT={motor_current_homing_y} 
            SET_TMC_CURRENT STEPPER=stepper_y CURRENT={motor_current_homing_y}
            G28 Y0
        {% endif %}
    {% endif %}

  {% if home_y and home_x %}
    # Restore current
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={printer.configfile.config["tmc2209 stepper_x"].run_current}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={printer.configfile.config["tmc2209 stepper_y"].run_current}
  {% endif %}

   # Home z
   {% if home_z %}
        {% if verbose %}
            { action_respond_info("Homing Z") }
        {% endif %}
   _Home_Z
   {% endif %}
   
    _exit_point function=homing_override


[gcode_macro _Home_Z]
gcode:
    {% set z_endstop_x = printer["gcode_macro _homing_variables"].z_endstop_x %}
    {% set z_endstop_y = printer["gcode_macro _homing_variables"].z_endstop_y %}
    {% set safe_z = printer["gcode_macro _homing_variables"].safe_z|float %}
    {% set travel_feedrate = printer["gcode_macro _homing_variables"].travel_speed * 60 %}   
    {% set z_drop_feedrate = printer["gcode_macro _homing_variables"].z_drop_speed * 60 %}
    {% set verbose = printer["gcode_macro _homing_variables"].verbose %}

     _entry_point function=Home_Z

    {% if not 'xy' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home X and Y Axis First!") }
    {% else %}
        _HomingDebug msg="_Home_Z XY Axis homed"
        {% if not 'z' in printer.toolhead.homed_axes %}
            {% if verbose %}
                { action_respond_info("Resetting Z position to zero") }
            {% endif %}
            SET_KINEMATIC_POSITION Z=0
        {% endif %}
        G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}
        _HomingDebug msg="_Home_Z Homing Z G28 Z"
        G28 Z0
        G0 Z{safe_z} F{z_drop_feedrate}
    {% endif %}

   _exit_point function=Home_Z




